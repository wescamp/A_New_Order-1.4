#textdomain wesnoth-A_New_Order
# programming-macros.cfg - basic macros to make it easier to program in WML.
#
#===============================================================================
# Reference:
#-------------------------------------------------------------------------------
# Basic variable manipulations:
#    {SET <variable> <value>}
#    {FORMAT <variable> <value>} # like set, except for interpretation of '$'.
#    {RELEASE <variable>}
#-------------------------------------------------------------------------------
# Simple boolean system:
#    {SET_TRUE <boolean-variable>}
#    {SET_FALSE <boolean-variable>}
#-------------------------------------------------------------------------------
# Conditionals:
#    {IF_TRUE <boolean-variable>}
#    {IF_FALSE <boolean-variable>}
#    {IF_HAVE_UNIT <description>}
#    {IF <variable> <comparison> <value>}
#    {PERCENT_CHANCE <number>}                 # terminate like an IF statement
#-----
#    {ELSE_IF <variable> <comparison> <value>} # for deep nestings
#    {ELSE}
#-----
#    {END_IF}
#    {END_IF_WITHOUT_ELSE}                     # terminator when ELSE isn't used
#-----
#    {TWO_END_IFs}                             # for deep nesting
#    {FOUR_END_IFs}                            # ""
#    {EIGHT_END_IFs}                           # ""
#    {SIXTEEN_END_IFs}                         # ""
#    {THIRTYTWO_END_IFs}                       # ""
#    Hopefully that's enough...
#-------------------------------------------------------------------------------
# Loops:
#    {WHILE <variable> <comparison> <value>}
#    {END_WHILE}
#-----
#    {FOREACH <array-variable> <index-variable>}   is defined elsewhere
#    {NEXT <variable>}                             is defined elsewhere.
#    You can use {NEXT } with {WHILE } as well.
#-------------------------------------------------------------------------------
# Math:
#    {ADD <numeric-variable> <numeric-value>}
#    {MULTIPLY <numeric-variable> <numeric-value>}
#    {INCREMENT <numeric-variable>}
#    {DECREMENT <numeric-variable>}
#    {IF_EVEN <numeric-variable>}
#    {IF_ODD <numeric-variable>}
#-------------------------------------------------------------------------------
# Conditional debug display:
#    {DEBUG MSG} # Only displays between {DEBUG_ON} and {DEBUG_OFF}.
#    {DEBUG_ON}
#    {DEBUG_OFF}
#===============================================================================
#-------------------------------------------------------------------------------
# Definitions:
#===============================================================================
# Basic variable manipulations:
#-------------------------------------------------------------------------------
# {SET <variable> <value>}
#define SET VAR VALUE
    {VARIABLE {VAR} {VALUE}}   # just an alias for the built-in.
#enddef
#-------------------------------------------------------------------------------
# {FORMAT <variable> <value>} # like set, except for interpretation of $
#define FORMAT VAR VALUE
    {VARIABLE_OP {VAR} format {VALUE}}
#enddef
#-------------------------------------------------------------------------------
# {RELEASE <variable>}
#define RELEASE VAR
    {CLEAR_VARIABLE {VAR}}     # just an alias for the built-in
#enddef
#===============================================================================
# Simple boolean system:
#-------------------------------------------------------------------------------
# {SET_TRUE <boolean-variable>}
#define SET_TRUE VAR
    {SET {VAR} T}
#enddef
#-------------------------------------------------------------------------------
# {SET_FALSE <boolean-variable>}
#define SET_FALSE VAR
    {SET {VAR} F}
#enddef
#===============================================================================
# Conditionals:
#-------------------------------------------------------------------------------
# {IF_TRUE <boolean-variable>}
#define IF_TRUE VAR
    [if]
        [variable]
            name={VAR}
            equals=T
        [/variable]
        [then]
#enddef
#-------------------------------------------------------------------------------
# {IF_FALSE <boolean-variable>}
#define IF_FALSE VAR
    [if]
        [variable]
            name={VAR}
            equals=F
        [/variable]
        [then]
#enddef
#-------------------------------------------------------------------------------
# {IF <variable> <comparison> <value>}
#define IF VAR OP VALUE
    [if]
        [variable]
            name={VAR}
            {OP}={VALUE}
        [/variable]
        [then]
#enddef
#----------------------------------------------------
#define IF_HAVE_UNIT DESC
    [if]
        [have_unit]
            description={DESC}
        [/have_unit]
        [then]
#enddef
#define IF_HAVE_UNIT_TYPE TYPE
    [if]
        [have_unit]
            type={TYPE}
        [/have_unit]
        [then]
#enddef
#-------------------------------------------------------------------------------
# {PERCENT_CHANCE <number>}                 # terminate like an IF statement
#define PERCENT_CHANCE PERCENT
    {RANDOM 1..100}
    {IF random less_than_equal_to {PERCENT}}
#enddef
#-------------------------------------------------------------------------------
# {ELSE_IF <variable> <comparison> <value>} # for deep nestings
#define ELSE_IF VAR OP VALUE
    {ELSE}{IF {VAR} {OP} {VALUE}}
#enddef
#-------------------------------------------------------------------------------
# {ELSE}
#define ELSE
[/then]
[else]
#enddef
#-------------------------------------------------------------------------------
# {END_IF}
#define END_IF
[/else]
[/if]
#enddef
#-------------------------------------------------------------------------------
# {END_IF_WITHOUT_ELSE}                    # terminator when ELSE isn't used
#define END_IF_WITHOUT_ELSE
[/then]
[/if]
#enddef
#-------------------------------------------------------------------------------
# {TWO_END_IFs}                             # for deep nesting
#define TWO_END_IFs
    {END_IF}{END_IF}
#enddef
#-----
# {FOUR_END_IFs}                            # ""
#define FOUR_END_IFs
    {TWO_END_IFs}{TWO_END_IFs}
#enddef
#-----
# {EIGHT_END_IFs}                           # ""
#define EIGHT_END_IFs
    {FOUR_END_IFs}{FOUR_END_IFs}
#enddef
#-----
# {SIXTEEN_END_IFs}                         # ""
#define SIXTEEN_END_IFs
    {EIGHT_END_IFs}{EIGHT_END_IFs}
#enddef
#-----
# {THIRTYTWO_END_IFs}                       # ""
#define THIRTYTWO_END_IFs
    {SIXTEEN_END_IFs}{SIXTEEN_END_IFs}
#enddef
#===============================================================================
# Loops:
#-------------------------------------------------------------------------------
# {WHILE <variable> <comparison> <value>}
#define WHILE VAR OP VALUE
    [while]
        [variable]
            name={VAR}
            {OP}={VALUE}
        [/variable]
        [do]
#enddef
#-------------------------------------------------------------------------------
# {END_WHILE}
#define END_WHILE
[/do]
[/while]
#enddef
#===============================================================================
# Math:
#-------------------------------------------------------------------------------
# {ADD <numeric-variable> <numeric-value>}
#define ADD VAR VALUE
    {VARIABLE_OP {VAR} add {VALUE}}
#enddef
#-------------------------------------------------------------------------------
# {MULTIPLY <numeric-variable> <numeric-value>}
#define MULTIPLY VAR VALUE
    {VARIABLE_OP {VAR} multiply {VALUE}}
#enddef
#-------------------------------------------------------------------------------
#  {INCREMENT <numeric-variable>}
#define INCREMENT N
    {ADD {N} 1}
#enddef
#-------------------------------------------------------------------------------
# {DECREMENT <numeric-variable>}
#define DECREMENT N
    {ADD {n} -1}
#enddef
#-------------------------------------------------------------------------------
# {IF_EVEN <numeric-variable>}
# {IF_ODD <numeric-variable>}
#define CHECK_EVEN N
    {SET temp_a {N}}
    {SET temp_b {N}}
    {INCREMENT temp_a}
    {MULTIPLY temp_a .5}
    {MULTIPLY temp_b .5}
    {IF temp_a equals $temp_b}
    {SET_TRUE global_var__is_even}
    {ELSE}
    {SET_FALSE global_var__is_even}
    {END_IF}
    {RELEASE temp_a}
    {RELEASE temp_b}
#enddef
#define IF_EVEN N
    {CHECK_EVEN {N}}
    {IF_TRUE global_var__is_even}
    # no good place to deallocate 'global_var__is_even'.
#enddef
#define IF_ODD N
    {CHECK_EVEN {N}}
    {IF_FALSE global_var__is_even}
    # no good place to deallocate 'global_var__is_even'.
#enddef
#===============================================================================
# Conditional debug display:
#-------------------------------------------------------------------------------
# {DEBUG MSG} # Only displays between {DEBUG_ON} and {DEBUG_OFF}.
#define DEBUG MSG
    {IF_TRUE global_var__debug}
    [message]
        speaker=narrator
        message={MSG}
        image=wesnoth-icon.png
    [/message]
    {END_IF_WITHOUT_ELSE}
#enddef
#-------------------------------------------------------------------------------
# {DEBUG_ON}
#define DEBUG_ON
    {SET_TRUE global_var__debug}
#enddef
#-------------------------------------------------------------------------------
# {DEBUG_OFF}
#define DEBUG_OFF
    {SET_FALSE global_var__debug}
#enddef
#-------------------------------------------------------------------------------
# Initialize it:
{DEBUG_OFF}
#-------------------------------------------------------------------------------
# {END_IF_WITHOUT_ELSE}                    # terminator when ELSE isn't used
#define END_IF_WITHOUT_ELSE
[/then]
[/if]
#enddef
#-------------------------------------------------------------------------------
# {END_IF_WITHOUT_ELSE}                    # terminator when ELSE isn't used
#define END_IF_WITHOUT_ELSE
[/then]
[/if]
#enddef
#-------------------------------------------------------------------------------
# {END_IF_WITHOUT_ELSE}                    # terminator when ELSE isn't used
#define END_IF_WITHOUT_ELSE
[/then]
[/if]
#enddef
